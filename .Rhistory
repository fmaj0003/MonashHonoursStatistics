q()
options(digits = 3)
## load relevant packages
library(tufte)
library(haven)
library(data.table)
library(JWileymisc)
library(psych)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(scales)
library(ggExtra)
## turn off some notes from R in the final HTML document
knitr::opts_chunk$set(message = FALSE)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline
dd <- as.data.table(read_sav("[2021] PSY4210 DD.sav")) # daily
## add items together, if missing any item, missing Stress
db[, StressADD := PSS1 + (6-PSS2r) + (6-PSS3r) + PSS4]
## Or I could recode the variables PSS2r and PSS3r first
db [, PSS2 := 6- PSS2r]
db [, PSS3 := 6- PSS3r]
## average items
db[, StressAVG := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## average items then multiply to get back to "sum" scale
db[, Stress := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## Let's look at how stressed people were in previous years of PSY4210 in general
summary(db$StressAVG)
## calculate Cronbach's alpha
psych::alpha(as.data.frame(db[, .(PSS1, PSS2, PSS3, PSS4)]))
## let's try with out the reverse-coded items for PSS 2 and 3
## Pay attention to the warnings provided
psych::alpha(as.data.frame(db[, .(PSS1, PSS2r, PSS3r, PSS4)]))
## Let's do the same thing with an additional 'check.keys=TRUE' option
psych::alpha(as.data.frame(db[, .(PSS1, PSS2r, PSS3r, PSS4)]), check.keys = TRUE)
## create a categorical stress variable
db[StressAVG < 3, StrCat := "low"]
db[StressAVG >= 3, StrCat := "high"]
db[, StrCat := factor(StrCat, levels = c("low", "high"))]
## wouldn't be a bad idea to also let R know that sex and relsta are factors
db[, relsta := factor(
relsta, levels = c(1,2,3),
labels = c("single", "in a committed exclusive relationship", "in a committed nonexclusive relationship"))]
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
## add items together, if missing any item, missing Stress
db[, StressADD := PSS1 + (6-PSS2r) + (6-PSS3r) + PSS4]
## Or I could recode the variables PSS2r and PSS3r first
db [, PSS2 := 6- PSS2r]
db [, PSS3 := 6- PSS3r]
## average items
db[, StressAVG := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## average items then multiply to get back to "sum" scale
db[, Stress := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## Let's look at how stressed people were in previous years of PSY4210 in general
summary(db$StressAVG)
## let's try with out the reverse-coded items for PSS 2 and 3
## Pay attention to the warnings provided
psych::alpha(as.data.frame(db[, .(PSS1, PSS2r, PSS3r, PSS4)]))
?alpha
?psych::alpha
## Let's do the same thing with an additional 'check.keys=TRUE' option
psych::alpha(as.data.frame(db[, .(PSS1, PSS2r, PSS3r, PSS4)]), check.keys = TRUE)
## create a categorical stress variable
db[StressAVG < 3, StrCat := "low"]
db[StressAVG >= 3, StrCat := "high"]
db[, StrCat := factor(StrCat, levels = c("low", "high"))]
View(db)
## wouldn't be a bad idea to also let R know that sex and relsta are factors
db[, relsta := factor(
relsta, levels = c(1,2,3),
labels = c("single", "in a committed exclusive relationship", "in a committed nonexclusive relationship"))]
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
pb <- ggplot(data = db, aes(x = Stress))
View(pb)
pb
pb + geom_histogram()
## looks like we have a pretty normal distribution based on this
pb
pb + geom_histogram()
pb + geom_density()
pb + geom_density()
pb + geom_dotplot()
ggplot(db, aes(sample = scale(Stress))) +
geom_qq() +
geom_abline(intercept = 0, slope = 1)
ggplot(db, aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
ggplot(db, aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
##To remove the NAs for sex
ggplot(db[!is.na(sex)], aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
##To remove the NAs for sex
ggplot(db[!is.na(sex)], aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
ggplot(db[!is.na(sex)], aes(Stress, colour = sex)) +
geom_density()
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
ggplot(db[!is.na(sex)], aes(Stress, colour = sex)) +
geom_density()
ggplot(db[!is.na(sex)], aes(Stress, fill = sex)) +
geom_histogram()
ggplot(db[!is.na(sex)], aes(Stress, fill = sex)) +
geom_histogram()
q()
options(digits = 3)
## load relevant packages
library(tufte)
library(haven)
library(data.table)
library(JWileymisc)
library(psych)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(scales)
library(ggExtra)
## turn off some notes from R in the final HTML document
knitr::opts_chunk$set(message = FALSE)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline
dd <- as.data.table(read_sav("[2021] PSY4210 DD.sav")) # daily
View(db)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline
dd <- as.data.table(read_sav("[2021] PSY4210 DD.sav")) # daily
## add items together, if missing any item, missing Stress
db[, StressADD := PSS1 + (6-PSS2r) + (6-PSS3r) + PSS4]
## Or I could recode the variables PSS2r and PSS3r first
db [, PSS2 := 6- PSS2r]
db [, PSS3 := 6- PSS3r]
## average items
db[, StressAVG := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## average items then multiply to get back to "sum" scale
db[, Stress := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## Let's look at how stressed people were in previous years of PSY4210 in general
summary(db$StressAVG)
## Let's do the same thing with an additional 'check.keys=TRUE' option
psych::alpha(as.data.frame(db[, .(PSS1, PSS2r, PSS3r, PSS4)]), check.keys = TRUE)
## create a categorical stress variable
db[StressAVG < 3, StrCat := "low"]
db[StressAVG >= 3, StrCat := "high"]
db[, StrCat := factor(StrCat, levels = c("low", "high"))]
pb <- ggplot(data = db, aes(x = Stress))
pb + geom_histogram()
pb + geom_density()
pb + geom_dotplot()
ggplot(db, aes(sample = scale(Stress))) +
geom_qq() +
geom_abline(intercept = 0, slope = 1)
plot(testDistribution(db$Stress,
extremevalues = "theoretical", ev.perc = .005))
ggplot(db, aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
##To remove the NAs for sex
ggplot(db[!is.na(sex)], aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
## wouldn't be a bad idea to also let R know that sex and relsta are factors
db[, relsta := factor(
relsta, levels = c(1,2,3),
labels = c("single", "in a committed exclusive relationship", "in a committed nonexclusive relationship"))]
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
View(db)
##To remove the NAs for sex
ggplot(db[!is.na(sex)], aes(Stress, colour = sex)) +
geom_density() ## continuous stress scores by sex
library(tufte)
library(haven)
library(data.table)
library(JWileymisc)
library(psych)
library(ggplot2)
library(ggpubr)
library(ggthemes)
library(scales)
library(ggExtra)
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline
dd <- as.data.table(read_sav("[2021] PSY4210 DD.sav")) # daily
?rowMeans
psych::alpha(as.data.frame(db[, .(LSE1, LSE2, LSE3, LSE4)]), check.keys = TRUE)
db[, SE := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("LSE1", "LSE2", "LSE3", "LSE4")]
db[, relsta := factor(
relsta, levels = c(1,2,3),
labels = c("single", "in a committed exclusive relationship", "in a committed nonexclusive relationship"))]
View(db)
ggplot(db[!is.na(relsta)], aes(SE, colour = relsta)) +
geom_density()
mean(db$Stress)
db[Stress < 10, StrCat := "low"]
db[, Stress := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## First, do you remember how to reverse scores PSS items?
db [, PSS2 := 6- PSS2r]
db [, PSS3 := 6- PSS3r]
## Do you remember how to create a Stress total?
db[, Stress := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
mean(db$Stress)
db[Stress < 10, StrCat := "low"]
db[Stress >= 10, StrCat := "high"]
db[, StrCat := factor(StrCat, levels = c("low", "high"))]
View(db)
## It's always good to check you did a categorization correctly:
table(db$StrCat)
geom_density()
ggplot(db, aes(SE, colour = Stress),
geom_density()
ggplot(db, aes(SE, colour = StrCat),
geom_density()
## use `testDistribution()` to examine whether self esteem follows a
## normal distribution and whether it has any extreme values.
plot(testDistribution(db$SE,
extremevalues = "theoretical", ev.perc = .005))
ggplot(db, aes(SE, color = StrCat),
geom_density()
mean(db$Stress)
table(db$StrCat)
ggplot(db, aes(SE, color = StrCat),
geom_density()
ggplot(db, aes(SE, color = StrCat) +
ggplot(db, aes(SE, color = StrCat)) +
geom_density()
plot(testDistribution(db$SE,
extremevalues = "theoretical", ev.perc = .005))
## compute the personality variables if you haven't already done so
db [, BFI_N1 := 6- BFI_N1r]
db[, neuroticism:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_N1", "BFI_N2")]
db [, BFI_E1 := 6- BFI_E1r]
db[, extraversion := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_E1", "BFI_E2")]
db [, BFI_O1 := 6- BFI_O1r]
db[, openness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_O1", "BFI_O2")]
db [, BFI_C1 := 6- BFI_C1r]
db[, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")]
db [, BFI_A2 := 6- BFI_A2r]
db[, agreeableness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_A1", "BFI_A2")]
## create some binary variables (based on the median - will see another way to create based on median later)
db[, StressHigh := factor(Stress >= 10, levels = c(TRUE, FALSE), labels = c("High Stress","Low Stress"))]
db[, SelfesteemHigh := factor(SE >= 3.8, levels = c(TRUE, FALSE), labels = c("High SE", "Low SE"))]
View(db)
ggplot(db, aes(SE, color = SE)) +
geom_density()
## Make a histogram for the variable: `extraversion`.
ggplot(db, aes(extraversion, color = extraversion)) +
geom_histogram()
db[, relsta := factor(
relsta, levels = c(1,2,3),
labels = c("single", "in a committed exclusive relationship", "in a committed nonexclusive relationship"))]
plot(testDistribution(db$SE,
extremevalues = "theoretical", ev.perc = .005))
ggplot(db, aes(SE, color = SE)) +
geom_density()
?ggplot
ggplot(db, aes(openness, color = sex, ))
ggplot(db, aes(openness, color = sex)) + geom_density()
ggplot(db, aes(openness, color = sex)) + geom_dotplot()
ggplot(db, aes(openness, fill = sex)) + geom_dotplot()
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
ggplot(db, aes(openness, colour = sex)) + geom_dotplot()
q()
