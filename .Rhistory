traceback()
darkstudio::activate(path = /Applications/RStudio.app/Contents/Resources/app/www/index.htm)
darkstudio::activate(path= "/Applications/RStudio.app/Contents/Resources/app/www/index.htm")
traceback()
darkstudio::deactivate(path= "/Applications/RStudio.app/Contents/Resources/app/www/index.htm")
darkstudio::activate(path= "/Applications/RStudio.app/Contents/Resources/app/www/index.htm")
rs-theme-is-dark: TRUE
darkstudio::activate(path= "/Applications/RStudio.app/Contents/Resources/app/www/index.htm")
darkstudio::deactivate()
darkstudio::deactivate(path= "/Applications/RStudio.app/Contents/Resources/app/www/index.htm")
darkstudio::activate(path= "/Applications/RStudio.app/Contents/Resources/app/www/index.htm")
q()
load("~/Git Repos/MonashHonoursStatistics/LabReportA.RData")
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline data
View(db)
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_E1 := 6- BFI_E1r] # reverse scoring
db[, extraversion := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_E1", "BFI_E2")] # creating variable "extraversion"
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
## put your regression diagnostics code including plots using modelDiagnostics() here
md <- modelDiagnostics(m, ev.perc = 0.005)
plot(md, ncol = 2, ask = FALSE)
## put your code to summarize the final model using modelTest() here
summary(m)
mtest <- modelTest(m)
knitr::kable(APAStyler(mtest))
## put your code to visualize your regression model using visreg() here
visreg(m, xvar = "conscientiousness", by = "sex",
partial = FALSE, rug = FALSE,
overlay = TRUE, gg = TRUE) +
theme_pubr() +
ggtitle("Multiple regression for anxiety - separate lines for each sex group")
save.image("~/Git Repos/MonashHonoursStatistics/LabReportA.RData")
View(db)
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline data
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
## put your regression diagnostics code including plots using modelDiagnostics() here
md <- modelDiagnostics(m, ev.perc = 0.005)
plot(md, ncol = 2, ask = FALSE)
## put your code to summarize the final model using modelTest() here
summary(m)
mtest <- modelTest(m)
knitr::kable(APAStyler(mtest))
## put your code to visualize your regression model using visreg() here
visreg(m, xvar = "conscientiousness", by = "sex",
partial = FALSE, rug = FALSE,
overlay = TRUE, gg = TRUE) +
theme_pubr() +
ggtitle("Multiple regression for anxiety - separate lines for each sex group")
#create self-esteem from LSE questions
db[, selfesteem:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("LSE1", "LSE2", "LSE3", "LSE4")]
db[, SelfesteemHigh := as.integer(selfesteem >= 3.75)] #create "SelfesteemHigh" variable
#create extraversion variable (predictor) from BFI_E questions
db [, BFI_E1 := 6- BFI_E1r] # reverse scoring
db[, extraversion := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_E1", "BFI_E2")] # creating variable "extraversion"
#create agreeableness variable (predictor) from BFI_A questions
db [, BFI_A2 := 6- BFI_A2r] # reverse scoring
db [, agreeableness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_A1", "BFI_A2")] #creating variable "agreeableness"
mlog <- glm(SelfesteemHigh ~ extraversion + agreeableness,
data = db, family = binomial())
#predicted probability graph for SelfesteemHigh
visreg(mlog, xvar = "extraversion",
by = "agreeablenss", breaks = c(3, 4.5),
scale = "response", overlay = TRUE,
partial = FALSE, rug = FALSE, gg = TRUE) +
ylab("predicted probability of being high self esteem") +
theme_pubr()
#create self-esteem from LSE questions
db[, selfesteem:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("LSE1", "LSE2", "LSE3", "LSE4")]
db[, SelfesteemHigh := as.integer(selfesteem >= 3.75)] #create "SelfesteemHigh" variable
#create extraversion variable (predictor) from BFI_E questions
db [, BFI_E1 := 6- BFI_E1r] # reverse scoring
db[, extraversion := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_E1", "BFI_E2")] # creating variable "extraversion"
#create agreeableness variable (predictor) from BFI_A questions
db [, BFI_A2 := 6- BFI_A2r] # reverse scoring
db [, agreeableness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_A1", "BFI_A2")] #creating variable "agreeableness"
mlog <- glm(SelfesteemHigh ~ extraversion + agreeableness,
data = db, family = binomial())
#predicted probability graph for SelfesteemHigh
visreg(mlog, xvar = "extraversion",
by = "agreeablenss", breaks = c(3, 4.5),
scale = "response", overlay = TRUE,
partial = FALSE, rug = FALSE, gg = TRUE) +
ylab("predicted probability of being high self esteem") +
theme_pubr()
View(db)
#predicted probability graph for SelfesteemHigh
visreg(mlog, xvar = "extraversion",
by = "agreeableness", breaks = c(3, 4.5),
scale = "response", overlay = TRUE,
partial = FALSE, rug = FALSE, gg = TRUE) +
ylab("predicted probability of being high self esteem") +
theme_pubr()
# Calculate Odds Ratio
exp(coef(mlog))
# Calculate Confidence intervals
exp(confint(mlog))
# Calculate Odds Ratio
exp(coef(mlog))
# Calculate Confidence intervals
exp(confint(mlog))
#calculate marginal effect, using h = .01
h <- .01
# making original dataset to interpret with predictors, excluding missing values
originaldata <- db[!is.na(extraversion, agreeableness),
.(extraversion, agreeableness)]
# Calculate Odds Ratio
exp(coef(mlog))
# Calculate Confidence intervals
exp(confint(mlog))
#calculate marginal effect, using h = .01
h <- .01
# making original dataset to interpret with predictors, excluding missing values
originaldata <- db[!is.na(extraversion), !is.na(agreeableness),
.(extraversion, agreeableness)]
# dataset with increased extraversion only
IncreasedExtraversion <- db[!is.na(extraversion, agreeableness),
.(extraversion = extraversion + h, agreeableness)]
# Calculate Odds Ratio
exp(coef(mlog))
# Calculate Confidence intervals
exp(confint(mlog))
#calculate marginal effect, using h = .01
h <- .01
# making original dataset to interpret with predictors, excluding missing values
originaldata <- db[!is.na(extraversion), !is.na(agreeableness),
.(extraversion, agreeableness)]
# dataset with increased extraversion only
IncreasedExtraversion <- db[!is.na(extraversion), !is.na(agreeableness),
.(extraversion = extraversion + h, agreeableness)]
# dataset with increased agreeableableness only
IncreasedAgreeableness <- db[!is.na(extraversion), !is.na(agreeableness),
.(extraversion, agreeableness = agreeableness + h)]
# calculating predicted probabilities for original, extraversion and agreeableness
originaldata$Prob <- predict(mlog, newdata = originaldata,
type = "response")
IncreasedExtraversion$Prob <- predict(mlog, newdata = IncreasedExtraversion,
type = "response")
IncreasedAgreeableness$Prob <- predict(mlog, newdata = IncreasedAgreeableness,
type = "response")
# calculating the difference in probabilities per unit
ex.diffprob <- (IncreasedExtraversion$Prob - originaldata$Prob) / h
ag.diffprob <- (IncreasedAgreeableness$Prob - originaldata$Prob) / h
# calculating the average marginal effects
mean(ex.diffprob) # extraversion
mean(ag.diffprob) # agreeableness
View(IncreasedAgreeableness)
View(IncreasedAgreeableness)
View(db)
save.image("~/Git Repos/MonashHonoursStatistics/LabReportA (2).RData")
library(tufte)
options(digits = 3)
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
library(survey)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline
## if you have saved your last db datafile as an RData, simply go
## to the files tab on the bottom right corner of your window and
## click on it to load your saved db datafile here
## compute a stress variable if you haven't already
db [, PSS2 := 6- PSS2r]
db [, PSS3 := 6- PSS3r]
db[, stress := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("PSS1", "PSS2", "PSS3", "PSS4")]
## compute a self-esteem variable if you haven't already
db[, selfesteem:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("LSE1", "LSE2", "LSE3", "LSE4")]
## compute a neuroticism variable if you haven't already
db [, N1 := 6- BFI_N1r]
db[, neuroticism:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("N1", "BFI_N2")]
## create some binary variables
db[, StressHigh := as.integer(stress >= 2.5)]
db[, SelfesteemHigh := as.integer(selfesteem >= 3.75)]
## read in some example data from the internet
## (requires internet connection to run)
dcount <- fread("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
plot(testDistribution(dcount$num_awards))
## pick h value for difference, store that in variable h
h <- .01
## make the original dataset. Exclude the case with missing
originaldata2 <- db[!is.na(neuroticism), .(selfesteem, neuroticism)]
## make the increased self esteem dataset (selfesteem + h)
increasedSelfEsteem <- db[!is.na(neuroticism), .(selfesteem = selfesteem + h, neuroticism)]
## make the increased neuroticism dataset (neuroticism + h)
increasedNeuro <- db[!is.na(neuroticism), .(selfesteem, neuroticism = neuroticism + h)]
## calculate original predicted probabilities
originaldata2$Prob <- predict(mlog3, newdata = originaldata2,
type = "response")
View(db)
load("~/Git Repos/MonashHonoursStatistics/LabReportA (2).RData")
# Calculate Odds Ratio
exp(coef(mlog))
# Calculate Confidence intervals
exp(confint(mlog))
#calculate marginal effect, using h = .01
h <- .01
# making original dataset to interpret with predictors, excluding missing values
originaldata <- db[!is.na(extraversion),
.(extraversion, agreeableness)]
# dataset with increased extraversion only
IncreasedExtraversion <- db[!is.na(extraversion),
.(extraversion = extraversion + h, agreeableness)]
# dataset with increased agreeableableness only
IncreasedAgreeableness <- db[!is.na(extraversion),
.(extraversion, agreeableness = agreeableness + h)]
# calculating predicted probabilities for original, extraversion and agreeableness
originaldata$Prob <- predict(mlog, newdata = originaldata,
type = "response")
IncreasedExtraversion$Prob <- predict(mlog, newdata = IncreasedExtraversion,
type = "response")
IncreasedAgreeableness$Prob <- predict(mlog, newdata = IncreasedAgreeableness,
type = "response")
# calculating the difference in probabilities per unit
ex.diffprob <- (IncreasedExtraversion$Prob - originaldata$Prob) / h
ag.diffprob <- (IncreasedAgreeableness$Prob - originaldata$Prob) / h
# calculating the average marginal effects
mean(ex.diffprob) # extraversion
mean(ag.diffprob) # agreeableness
View(IncreasedAgreeableness)
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
q()
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline data
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
confint(m)
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline data
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline data
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
confint(m)
## put your code to summarize the final model using modelTest() here
summary(m)
confint(m) # calculating confidence interval
mtest <- modelTest(m)
knitr::kable(APAStyler(mtest)) # clean presentation
## put your code to visualize your regression model using visreg() here
visreg(m, xvar = "conscientiousness", by = "sex",
partial = FALSE, rug = FALSE,
overlay = TRUE, gg = TRUE) +
theme_pubr() +
ggtitle("Multiple regression for anxiety - separate lines for each sex group")
## put your code to summarize the final model using modelTest() here
summary(m)
confint(m) # calculating confidence interval
mtest <- modelTest(m)
knitr::kable(APAStyler(mtest)) # clean presentation
## put your code to visualize your regression model using visreg() here
visreg(m, xvar = "conscientiousness", by = "sex",
partial = FALSE, rug = FALSE,
overlay = TRUE, gg = TRUE) +
theme_pubr() +
ggtitle("Multiple regression for anxiety - separate lines for each sex group")
## put your code to summarize the final model using modelTest() here
summary(m)
confint(m) # calculating confidence interval
mtest <- modelTest(m)
knitr::kable(APAStyler(mtest)) # clean presentation
## put your code to visualize your regression model using visreg() here
visreg(m, xvar = "conscientiousness", by = "sex",
partial = FALSE, rug = FALSE,
overlay = TRUE, gg = TRUE) +
theme_pubr() +
ggtitle("Multiple regression for anxiety - separate lines for each sex group")
?plot
?plot
# Calculate Odds Ratio
exp(coef(mlog))
library(haven)
library(data.table)
library(JWileymisc)
library(ggplot2)
library(ggpubr)
library(visreg)
## read in data
db <- as.data.table(read_sav("[2021] PSY4210 BL.sav")) # baseline data
#creating variable "anxiety"
db[, anxiety := rowMeans(.SD, na.rm = TRUE) * 4,
.SDcols = c("STAI1", "STAI2", "STAI3", "STAI4")]
# turning sex into a factor
db[, sex := factor(
sex,
levels = c(1,2),
labels = c("male", "female"))]
db [, BFI_C1 := 6- BFI_C1r] #reverse scoring
db [, conscientiousness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_C1", "BFI_C2")] # creating variable "conscientiousness"
## put your regression model code using lm() here
m <- lm(anxiety ~ sex * conscientiousness, data = db)
## put your regression diagnostics code including plots using modelDiagnostics() here
md <- modelDiagnostics(m, ev.perc = 0.005)
plot(md, ncol = 2, ask = FALSE)
## put your code to summarize the final model using modelTest() here
summary(m)
confint(m) # calculating confidence interval
mtest <- modelTest(m)
knitr::kable(APAStyler(mtest)) # clean presentation
## put your code to visualize your regression model using visreg() here
visreg(m, xvar = "conscientiousness", by = "sex",
partial = FALSE, rug = FALSE,
overlay = TRUE, gg = TRUE) +
theme_pubr() +
ggtitle("Multiple regression for anxiety - separate lines for each sex group")
#create self-esteem from LSE questions
db[, selfesteem:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("LSE1", "LSE2", "LSE3", "LSE4")]
db[, SelfesteemHigh := as.integer(selfesteem >= 3.75)] #create "SelfesteemHigh" variable
#create extraversion variable (predictor) from BFI_E questions
db [, BFI_E1 := 6- BFI_E1r] # reverse scoring
db[, extraversion := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_E1", "BFI_E2")] # creating variable "extraversion"
#create agreeableness variable (predictor) from BFI_A questions
db [, BFI_A2 := 6- BFI_A2r] # reverse scoring
db [, agreeableness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_A1", "BFI_A2")] #creating variable "agreeableness"
mlog <- glm(SelfesteemHigh ~ extraversion + agreeableness,
data = db, family = binomial())
#predicted probability graph for SelfesteemHigh
visreg(mlog, xvar = "extraversion",
by = "agreeableness", breaks = c(3, 4.5),
scale = "response", overlay = TRUE,
partial = FALSE, rug = FALSE, gg = TRUE) +
ylab("predicted probability of being high self esteem") +
theme_pubr()
# Calculate Odds Ratio
exp(coef(mlog))
# Calculate Confidence intervals
exp(confint(mlog))
#calculate marginal effect, using h = .01
h <- .01
# making original dataset to interpret with predictors, excluding missing values
originaldata <- db[!is.na(extraversion),
.(extraversion, agreeableness)]
# dataset with increased extraversion only
IncreasedExtraversion <- db[!is.na(extraversion),
.(extraversion = extraversion + h, agreeableness)]
# dataset with increased agreeableableness only
IncreasedAgreeableness <- db[!is.na(extraversion),
.(extraversion, agreeableness = agreeableness + h)]
# calculating predicted probabilities for original, extraversion and agreeableness
originaldata$Prob <- predict(mlog, newdata = originaldata,
type = "response")
IncreasedExtraversion$Prob <- predict(mlog, newdata = IncreasedExtraversion,
type = "response")
IncreasedAgreeableness$Prob <- predict(mlog, newdata = IncreasedAgreeableness,
type = "response")
# calculating the difference in probabilities per unit
ex.diffprob <- (IncreasedExtraversion$Prob - originaldata$Prob) / h
ag.diffprob <- (IncreasedAgreeableness$Prob - originaldata$Prob) / h
# calculating the average marginal effects
mean(ex.diffprob) # extraversion
mean(ag.diffprob) # agreeableness
#create self-esteem from LSE questions
db[, selfesteem:= rowMeans(.SD, na.rm = TRUE),
.SDcols = c("LSE1", "LSE2", "LSE3", "LSE4")]
db[, SelfesteemHigh := as.integer(selfesteem >= 3.75)] #create "SelfesteemHigh" variable
#create extraversion variable (predictor) from BFI_E questions
db [, BFI_E1 := 6- BFI_E1r] # reverse scoring
db[, extraversion := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_E1", "BFI_E2")] # creating variable "extraversion"
#create agreeableness variable (predictor) from BFI_A questions
db [, BFI_A2 := 6- BFI_A2r] # reverse scoring
db [, agreeableness := rowMeans(.SD, na.rm = TRUE),
.SDcols = c("BFI_A1", "BFI_A2")] #creating variable "agreeableness"
mlog <- glm(SelfesteemHigh ~ extraversion + agreeableness,
data = db, family = binomial())
summary(mlog)
save.image("~/Git Repos/MonashHonoursStatistics/LabReportA.RData")
q()
